import pandas as pd
dataset = pd.read_csv('cpdata.csv')
pd.get_dummies(dataset.label)
merge = pd.concat([dataset, dummies],axis ='columns')
shuffle_dataset = merge.sample(frac=1)
shuffleds=shuffle_dataset.drop(['label'],axis =1)
train_size = int(0.8*len(merge))
train_set = shuffleds[:train_size]
test_set = shuffleds[train_size:]
import numpy as np
class NaiveBayes():
    def __init__(self, X, y):
        self.num_rows,self.num_features = X.shape
        self.num_classes = len(np.unique(y))
        self.eps = 1e-6
    def fit(self, X,y):
        self.classes_mean = {}
        self.classes_variance = {}
        self.classes_prior = {}
        for c in range(self.num_classes):
            X_c = X[y==c]
            self.classes_mean[str(c)] = np.mean(X_c,axis =0)
            self.classes_variance[str(c)] = np.var(X_c, axis = 0)
            self.classes_prior[str(c)]= X_c.shape[0]/self.num_rows
    def density_function(self,x, mean, sigma):
        const = self.num_features/2 * np.log(2*np.pi) - 0.5*np.sum(np.log(sigma + self.eps))
        probs = 0.5 * (np.sum(np.power(x-mean,2)/(sigma+self.eps),1))
        return const - probs
    def predict(self,X):
        probs = np.zeros((self.num_rows,self.num_classes))
        #probs=[]
        for c in range(self.num_classes):
            prior = np.log(self.classes_prior[str(c)])
            probs_c = self.density_function(X, self.classes_mean[str(c)], self.classes_variance[str(c)])
            s = X.shape[0]
            #prob = probs_c + prior
            probs[:s,c] = probs_c + prior
            #probs.append(prob)
        return np.argmax(probs,1)
    
if __name__ == '__main__':
    for a in range(len(train_set.columns[4:])):
        b = a +4
        X = train_set.iloc[:,:4].values
        y = train_set.iloc[:,b].values
        NB = NaiveBayes(X,y)
        NB.fit(X,y)
        v = test_set.iloc[:,:4].values
        z = test_set.iloc[:,b].values
    
        y_predict = NB.predict(v)
        print(y_predict)
    
    
        sum = 0
        for i,j in zip(y_predict,z):
            if i == j:
                sum = sum + 1
        print(sum/v.shape[0])
  